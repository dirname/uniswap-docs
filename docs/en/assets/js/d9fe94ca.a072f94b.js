"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[8321],{27768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={id:"computation",title:"Computation"},s="getMarketDetails",o={unversionedId:"sdk/v1/reference/computation",id:"sdk/v1/reference/computation",title:"Computation",description:"This function computes market details for the passed reserves data. Markets are defined as ETH&lt;&gt;ERC20, ERC20&lt;&gt;ETH, or ERC20&lt;&gt;ERC20 pairs, where the first currency is the input and the second is the output. Reserves must be specified for both the input and output currency.",source:"@site/docs/sdk/v1/reference/03-computation.md",sourceDirName:"sdk/v1/reference",slug:"/sdk/v1/reference/computation",permalink:"/uniswap-docs/en/sdk/v1/reference/computation",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/v1/reference/03-computation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"computation",title:"Computation"},sidebar:"sdkSidebar",previous:{title:"Data",permalink:"/uniswap-docs/en/sdk/v1/reference/data"},next:{title:"Format",permalink:"/uniswap-docs/en/sdk/v1/reference/format"}},l={},p=[{value:"Function Signature",id:"function-signature",level:2},{value:"Input Parameters",id:"input-parameters",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Function Signature",id:"function-signature-1",level:2},{value:"Input Parameters",id:"input-parameters-1",level:2},{value:"Example Usage",id:"example-usage-1",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getmarketdetails"},"getMarketDetails"),(0,r.kt)("p",null,"This function computes market details for the passed reserves data. Markets are defined as ETH","<",">","ERC20, ERC20","<",">","ETH, or ERC20","<",">","ERC20 pairs, where the first currency is the input and the second is the output. Reserves must be specified for both the input and output currency."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In the case of ETH, ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," should be passed as the reserves data. ",(0,r.kt)("a",{parentName:"p",href:"/sdk/1.0.0/reference/data/#getttokenreserves"},(0,r.kt)("inlineCode",{parentName:"a"},"getTokenReserves"))," formatted ERC20 reserves, or the requisite data can be fetched manually and passed in.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Rates are calculated to 18 decimal places of precision."))),(0,r.kt)("h2",{id:"function-signature"},"Function Signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export function getMarketDetails(\n  optionalReservesInput: OptionalReserves,\n  optionalReservesOutput: OptionalReserves\n): MarketDetails\n")),(0,r.kt)("h2",{id:"input-parameters"},"Input Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"optionalReservesInput"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OptionalReserves")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Reserves data for the input currency.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"optionalReservesOutput"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OptionalReserves")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Reserves data for the output currency.")))),(0,r.kt)("h2",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const reserves: ChainIdOrProvider = await getTokenReserves(tokenAddress)\n\nconst marketDetails: MarketDetails = getMarketDetails(undefined, reserves) // ETH<>ERC20\n\n/*\n{\n  // market type\n  tradeType: 'ETH_TO_TOKEN',\n\n  // dummy ETH reserves\n  inputReserves: {\n    token: {\n      chainId: 1,\n      address: 'ETH',\n      decimals: 18\n    }\n  },\n\n  // normalized token reserves\n  outputReserves: <NormalizedReserves>,\n\n  // market rate calculated to 18 decimals of precision\n  marketRate: {\n    rate: <BigNumber>,        // x output / 1 input\n    rateInverted: <BigNumber> // x input / 1 output\n  }\n}\n*/\n")),(0,r.kt)("h1",{id:"gettradedetails"},"getTradeDetails"),(0,r.kt)("p",null,"This function computes trade details for the passed market data."),(0,r.kt)("p",null,"-This function throws an error if the passed ","_","tradeAmount is greater than the amount of ETH/tokens in the relevant Uniswap exchange."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Trade amounts must be passed in non-decimal form ","(","where e.g. 1 ETH is represented as 1000000000000000000 wei",")",".")),(0,r.kt)("h2",{id:"function-signature-1"},"Function Signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export function getTradeDetails(\n  tradeExact: TRADE_EXACT,\n  _tradeAmount: BigNumberish,\n  marketDetails: MarketDetails\n): TradeDetails\n")),(0,r.kt)("h2",{id:"input-parameters-1"},"Input Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"tradeExact"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TRADE_EXACT")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether either the input or the output currency is the exact amount.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"_","tradeAmount"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"BigNumberish")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The amount to buy/sell ","(","of the output/input currency, depending on tradeExact",")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"marketDetails"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"MarketDetails")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Market details.")))),(0,r.kt)("h2",{id:"example-usage-1"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const _purchaseAmount: BigNumber = new BigNumber('2.5')\nconst _decimals: number = 18\nconst tradeAmount: BigNumber = _purchaseAmount.multipliedBy(10 ** _decimals)\nconst marketDetails: MarketDetails = getMarketDetails(undefined, reserves) // ETH<>ERC20\n\n// buy exactly 2.5 of an 18 decimal ERC20 with ETH\nconst tradeDetails: TradeDetails = getTradeDetails(TRADE_EXACT.OUTPUT, tradeAmount, marketDetails)\n\n/*\n{\n  marketDetailsPre: <MarketDetails>,\n\n  marketDetailsPost: <MarketDetails>,\n\n  tradeType: 'ETH_TO_TOKEN',\n\n  tradeExact: 'OUTPUT',\n\n  inputAmount: {\n    token: <Token>,\n    amount: <BigNumber>\n  },\n\n  outputAmount: {\n    token: <Token>,\n    amount: <BigNumber>\n  },\n\n  // execution rate calculated to 18 decimals of precision\n  executionRate: {\n    rate: <BigNumber>         // x output / 1 input\n    rateInverted: <BigNumber> // x input / 1 output\n  },\n\n  // slippage between the pre- and post-trade market rates, in basis points, calculated to 18 decimals of precision\n  marketRateSlippage: <BigNumber>,\n\n  // slippage between the execution and pre-trade market rate, in basis points, calculated to 18 decimals of precision\n  executionRateSlippage: <BigNumber>\n}\n*/\n")))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);