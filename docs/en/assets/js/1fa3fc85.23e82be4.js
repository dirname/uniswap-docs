"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[2992],{76079:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(83117),o=(n(67294),n(3905));const r={id:"swap-tokens",title:"Swap Tokens",sidebar_position:3},i="Swap - Step by Step",s={unversionedId:"contracts/v4/concepts/swap-tokens",id:"contracts/v4/concepts/swap-tokens",title:"Swap Tokens",description:"The swap happens in a loop until the specified amount has been completely used or the price limit",source:"@site/docs/contracts/v4/concepts/04-swap-tokens.mdx",sourceDirName:"contracts/v4/concepts",slug:"/contracts/v4/concepts/swap-tokens",permalink:"/uniswap-docs/en/contracts/v4/concepts/swap-tokens",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/concepts/04-swap-tokens.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"swap-tokens",title:"Swap Tokens",sidebar_position:3},sidebar:"contractsSidebar",previous:{title:"Managing Positions",permalink:"/uniswap-docs/en/contracts/v4/concepts/managing-positions"},next:{title:"Lock Mechanism - Flash Accounting",permalink:"/uniswap-docs/en/contracts/v4/concepts/lock-mechanism"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swap---step-by-step"},"Swap - Step by Step"),(0,o.kt)("p",null,"The swap happens in a loop until the specified amount has been completely used or the price limit\nhas been reached. In each iteration, the code calculates how much of the tokens can be swapped at\nthe current price level."),(0,o.kt)("p",null,"The swap keeps iterating until either the specified amount is fully used or the square root of\nthe price hits the defined limit (",(0,o.kt)("inlineCode",{parentName:"p"},"sqrtPriceLimitX96"),")."),(0,o.kt)("p",null,"Here is the ",(0,o.kt)("inlineCode",{parentName:"p"},"SwapParams")," struct, ",(0,o.kt)("inlineCode",{parentName:"p"},"Swap")," event and ",(0,o.kt)("inlineCode",{parentName:"p"},"swap")," function from IPoolManager which is used to swap tokens:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/// @notice Emitted for swaps between currency0 and currency1\n/// @param id The abi encoded hash of the pool key struct for the pool that was modified\n/// @param sender The address that initiated the swap call, and that received the callback\n/// @param amount0 The delta of the currency0 balance of the pool\n/// @param amount1 The delta of the currency1 balance of the pool\n/// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n/// @param liquidity The liquidity of the pool after the swap\n/// @param tick The log base 1.0001 of the price of the pool after the swap\nevent Swap(\n    PoolId indexed id,\n    address indexed sender,\n    int128 amount0,\n    int128 amount1,\n    uint160 sqrtPriceX96,\n    uint128 liquidity,\n    int24 tick,\n    uint24 fee\n);\n\nstruct SwapParams {\n    bool zeroForOne;\n    int256 amountSpecified;\n    uint160 sqrtPriceLimitX96;\n}\n\n/// @notice Swap against the given pool\nfunction swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)\n    external\n    returns (BalanceDelta);\n")),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is an example of how to swap tokens by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"swap")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"PoolSwapTest swapRouter = new PoolSwapTest(IPoolManager(address(manager)));\n\nPoolSwapTest.TestSettings memory testSettings =\n    PoolSwapTest.TestSettings({withdrawTokens: true, settleUsingTransfer: true});\n\nswapRouter.swap(key, params, testSettings, hookData);\n")),(0,o.kt)("p",null,"Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"PoolSwapTest")," implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"ILockCallback")," interface and adds the ",(0,o.kt)("inlineCode",{parentName:"p"},"lockAcquired")," function, which in turn calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"manager.swap")," function."),(0,o.kt)("h1",{id:"acquiring-lock"},"Acquiring Lock"),(0,o.kt)("p",null,"Full detail about the locking mechanism is explained in the ",(0,o.kt)("a",{parentName:"p",href:"/03_Locking_Mechanism/README.md"},"Locking Mechanism")," section."),(0,o.kt)("p",null,"The contract that calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"swap")," must implement ILockCallback interface."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PoolSwapTest.sol")," has some examples of how to acquire lock and some basic checks in place.\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-core/blob/main/src/test/PoolSwapTest.sol"},"https://github.com/Uniswap/v4-core/blob/main/src/test/PoolSwapTest.sol")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"PoolSwapTest"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"lockAcquired"),' function is triggered when a certain "lock" is acquired in the\ncontext of swapping assets or tokens. Once this lock is confirmed, the function handles\nthe settlement based on the result of the swap. It decodes the data provided to understand the context, asks\nthe manager to perform the swap, and then either\ntransfers, withdraws, or mints tokens based on the balance changes resulting from the swap.'),(0,o.kt)("p",null,"To ensure secure operations, the function checks that it's only being called by the intended ",(0,o.kt)("inlineCode",{parentName:"p"},"manager")," contract.\nDepending on the type of swap and settings, it handles the balance adjustments for two types of currencies:\n",(0,o.kt)("inlineCode",{parentName:"p"},"currency0")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"currency1"),". After settling all balances, it returns the balance changes to the caller."))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);