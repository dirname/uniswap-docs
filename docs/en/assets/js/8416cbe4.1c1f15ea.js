"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[9243],{14840:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const o={id:"overview",title:"Overview",sidebar_position:1},i=void 0,s={unversionedId:"contracts/permit2/overview",id:"contracts/permit2/overview",title:"Overview",description:"Permit2 is a unification of 2 contracts, SignatureTransfer and AllowanceTransfer. The SignatureTransfer contract handles all signature-based transfers, meaning that an allowance on the token is bypassed and permissions to the spender only last for the duration of the transaction that the one-time signature is spent. The AllowanceTransfer contract handles setting allowances on tokens, giving permissions to spenders on a specified amount for a specified duration of time. Any transfers that then happen through the AllowanceTransfer contract will only succeed if the proper permissions have been set.",source:"@site/docs/contracts/permit2/overview.md",sourceDirName:"contracts/permit2",slug:"/contracts/permit2/overview",permalink:"/uniswap-docs/en/contracts/permit2/overview",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/permit2/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"overview",title:"Overview",sidebar_position:1},sidebar:"contractsSidebar",previous:{title:"Technical Reference",permalink:"/uniswap-docs/en/contracts/universal-router/technical-reference"},next:{title:"SignatureTransfer",permalink:"/uniswap-docs/en/contracts/permit2/reference/signature-transfer"}},c={},p=[{value:"Resources",id:"resources",level:2},{value:"Approving Permit2",id:"approving-permit2",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/permit2"},(0,a.kt)("inlineCode",{parentName:"a"},"Permit2"))," is a unification of 2 contracts, ",(0,a.kt)("a",{parentName:"p",href:"/uniswap-docs/en/contracts/permit2/reference/signature-transfer"},(0,a.kt)("inlineCode",{parentName:"a"},"SignatureTransfer"))," and ",(0,a.kt)("a",{parentName:"p",href:"/uniswap-docs/en/contracts/permit2/reference/allowance-transfer"},(0,a.kt)("inlineCode",{parentName:"a"},"AllowanceTransfer")),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"SignatureTransfer")," contract handles all signature-based transfers, meaning that an allowance on the token is bypassed and permissions to the spender only last for the duration of the transaction that the one-time signature is spent. The ",(0,a.kt)("inlineCode",{parentName:"p"},"AllowanceTransfer")," contract handles setting allowances on tokens, giving permissions to spenders on a specified amount for a specified duration of time. Any transfers that then happen through the ",(0,a.kt)("inlineCode",{parentName:"p"},"AllowanceTransfer")," contract will only succeed if the proper permissions have been set."),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("p",null,"A great ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dragonfly-xyz/useful-solidity-patterns/tree/main/patterns/permit2"},"explanation")," of the Permit2 contract and example usage."),(0,a.kt)("h2",{id:"approving-permit2"},"Approving Permit2"),(0,a.kt)("p",null,"Before integrating contracts can request users\u2019 tokens through Permit2, users must approve the Permit2 contract through the specific token contract by calling something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"USDC.approve(permit2Address, totalAmount);\n")),(0,a.kt)("p",null,"To get the maximal benefits from Permit2, users should do a max approval on the contract where: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"totalAmount = type(uint256).max;\n")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);