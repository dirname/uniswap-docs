"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[555],{89873:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(83117),n=(r(67294),r(3905));const i={id:"arbitrumfiller",title:"Arbitrum Pilot",sidebar_position:4},o="Arbitrum Pilot Overview",l={unversionedId:"contracts/uniswapx/guides/arbitrumfiller",id:"contracts/uniswapx/guides/arbitrumfiller",title:"Arbitrum Pilot",description:"Starting June 19 2024, the Uniswap team will be piloting running a portion of trades on Arbitrum through UniswapX. Unlike UniswapX on mainnet, these orders will have no RFQ portion and thus no exclusivity during the pilot.",source:"@site/docs/contracts/uniswapx/guides/arbitrumfiller.md",sourceDirName:"contracts/uniswapx/guides",slug:"/contracts/uniswapx/guides/arbitrumfiller",permalink:"/uniswap-docs/en/contracts/uniswapx/guides/arbitrumfiller",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/uniswapx/guides/arbitrumfiller.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"arbitrumfiller",title:"Arbitrum Pilot",sidebar_position:4},sidebar:"contractsSidebar",previous:{title:"Webhook Support",permalink:"/uniswap-docs/en/contracts/uniswapx/guides/webhooks"},next:{title:"Overview",permalink:"/uniswap-docs/en/contracts/universal-router/overview"}},s={},c=[{value:"Retrieving Signed Orders",id:"retrieving-signed-orders",level:2},{value:"Filling Orders",id:"filling-orders",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"arbitrum-pilot-overview"},"Arbitrum Pilot Overview"),(0,n.kt)("p",null,"Starting June 19 2024, the Uniswap team will be piloting running a portion of trades on Arbitrum through UniswapX. Unlike UniswapX on mainnet, these orders will have ",(0,n.kt)("strong",{parentName:"p"},"no RFQ portion and thus no exclusivity")," during the pilot. "),(0,n.kt)("p",null,"Filling on Arbitrum, however, follows the same two steps as filling on Mainnet: "),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Retrieving signed orders  "),(0,n.kt)("li",{parentName:"ol"},"Filling orders")),(0,n.kt)("h2",{id:"retrieving-signed-orders"},"Retrieving Signed Orders"),(0,n.kt)("p",null,"All signed Dutch Orders on Arbitrum, created through the Uniswap UI will be available via the UniswapX Orders Endpoint. We have ",(0,n.kt)("a",{parentName:"p",href:"https://api.uniswap.org/v2/uniswapx/docs"},"swagger documentation")," but see below for a quick example curl."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET https://api.uniswap.org/v2/orders?orderStatus=open&chainId=42161&limit=1000\n")),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/sdks/tree/main/sdks/uniswapx-sdk"},"UniswapX SDK")," to parse the ",(0,n.kt)("inlineCode",{parentName:"p"},"encodedOrder")," field returned from endpoint. Each one of these ",(0,n.kt)("inlineCode",{parentName:"p"},"Orders")," represents a fillable user trader. "),(0,n.kt)("p",null,"As a lower latency alternative to polling the API, fillers can also apply to register a webhook and receive a feed of all open orders. See details for registering ",(0,n.kt)("a",{parentName:"p",href:"./webhooks"},"here")),(0,n.kt)("h2",{id:"filling-orders"},"Filling Orders"),(0,n.kt)("p",null,"To execute a discovered order, a filler needs to call the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/UniswapX/blob/main/src/reactors/BaseReactor.sol#L31"},"execute")," method of the Reactor specified in the retrieved ",(0,n.kt)("inlineCode",{parentName:"p"},"encodedOrder")," body. Currently the Reactor used by the Uniswap interface is located at:  "),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://arbiscan.io/address/0x1bd1aAdc9E230626C44a139d7E70d842749351eb"},"0x1bd1aAdc9E230626C44a139d7E70d842749351eb")),(0,n.kt)("p",null,"Always confirm the address from the retrieved order before submitting. "),(0,n.kt)("p",null,"The simplest fill strategy is called ",(0,n.kt)("inlineCode",{parentName:"p"},"Direct Filler"),", where the trade is executed directly against tokens held in the fillers address. To use this strategy, a filler can simply approve the order's output tokens to the reactor and call ",(0,n.kt)("inlineCode",{parentName:"p"},"execute")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"executeBatch")," from their address. (see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/UniswapX/blob/v2.0.0-deploy/src/reactors/BaseReactor.sol"},"source"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"// Execute direct filler order\noutputToken.approve(reactor, type(uint256).max);\nreactor.execute(order);\n")),(0,n.kt)("p",null,"More sophisticated fillers can implement arbitrarily complex strategies by deploying their own Executor contracts. This contract should implement the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/UniswapX/blob/v2.0.0-deploy/src/interfaces/IReactorCallback.sol"},"IReactorCallback")," interface, which takes in an order with input tokens and acquires the allotted number of output tokens for the caller. It must approve the output tokens to the reactor, which then transfers them to the order output recipients to settle the order. Executor contracts must call ",(0,n.kt)("inlineCode",{parentName:"p"},"reactor.executeWithCallback")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"reactor.executeBatchWithCallback"),". They can also specify arbitrary callback data that will be passed into the ",(0,n.kt)("inlineCode",{parentName:"p"},"reactorCallback")," call."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Executor {\n  function execute(Order calldata order, bytes calldata callbackData) {\n    reactor.executeWithCallback(order, callbackData)\n  }\n\n  function reactorCallback(ResolvedOrder[] calldata orders, bytes calldata callbackData) {\n    // implement strategy here\n  }\n}\n\n// Execute custom fill strategy\naddress executor = /* Address of deployed executor contract */ ;\nbytes fillData = /* Call data to be sent to your executor contract */;\nexecutor.execute(order, fillData);\n")),(0,n.kt)("p",null,"For convenience, we\u2019ve provided an ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/UniswapX/blob/v2.0.0-deploy/src/sample-executors/SwapRouter02Executor.sol"},"example Executor Contract")," which demonstrates how a filler could implement a strategy that executes a UniswapX order against a Uniswap V3 pool. These contracts should be deployed to each chain that the filler would like to support."),(0,n.kt)("h1",{id:"get-in-touch"},"Get in touch"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"To keep up to date, join our ",(0,n.kt)("a",{parentName:"li",href:"https://t.me/uniswapx_fillers"},"Announcements Channel")),(0,n.kt)("li",{parentName:"ul"},"To ask questions and discuss, join our ",(0,n.kt)("a",{parentName:"li",href:"https://t.me/uniswapx_fillers_discussion"},"Fillers Group"))))}u.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),h=n,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||i;return r?a.createElement(m,o(o({ref:t},p),{},{components:r})):a.createElement(m,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);