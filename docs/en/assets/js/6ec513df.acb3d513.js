"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[4070],{58689:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=o(83117),r=(o(67294),o(3905));const a={id:"hook-deployment",title:"Hook Deployment",sidebar_position:3},s="Deployment",i={unversionedId:"contracts/v4/first-hook/hook-deployment",id:"contracts/v4/first-hook/hook-deployment",title:"Hook Deployment",description:"Deploying Uniswap V4 Hooks involves several steps:",source:"@site/docs/contracts/v4/first-hook/03-hook-deployment.mdx",sourceDirName:"contracts/v4/first-hook",slug:"/contracts/v4/first-hook/hook-deployment",permalink:"/uniswap-docs/en/contracts/v4/first-hook/hook-deployment",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/first-hook/03-hook-deployment.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"hook-deployment",title:"Hook Deployment",sidebar_position:3},sidebar:"contractsSidebar",previous:{title:"Testing Hooks",permalink:"/uniswap-docs/en/contracts/v4/first-hook/testing-hooks"},next:{title:"Overview",permalink:"/uniswap-docs/en/contracts/v3/overview"}},l={},c=[{value:"Deployment Scripts",id:"deployment-scripts",level:2},{value:"1. Deploying Your Own Tokens",id:"1-deploying-your-own-tokens",level:3},{value:"2. script/01_CreatePool.s.sol",id:"2-script01_createpoolssol",level:3},{value:"3. script/00_Counter.s.sol",id:"3-script00_counterssol",level:3}],p={toc:c};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,"Deploying Uniswap V4 Hooks involves several steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Deploying the PoolManager Contract"),": This contract is typically pre-deployed on many test environments. However,\nyou have the option to deploy it locally on your machine if required.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Deploying the Hook Contract"),": The hook contract needs to be deployed at a predetermined address. You can use\n",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE2")," for deterministic deployment. A Deterministic Deployment Proxy, usually found\nat ",(0,r.kt)("inlineCode",{parentName:"p"},"0x4e59b44847b379578588920cA78FbF26c0B4956C"),", is employed for this purpose and is already available in most\nenvironments.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Deploying Test Tokens"),": These tokens are essential for creating the pool. They need to be deployed before\ninitializing the pool.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Initializing the Pool with the Hook Contract Address"),": This is achieved by invoking\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes calldata hookData)")," function on the PoolManager contract.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Adding Liquidity or Modifying Position"),": If you wish to add liquidity to the pool or alter its position, a\nutility contract that implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"ILockCallback")," interface is necessary. You may consider deploying a utility\ncontract like ",(0,r.kt)("inlineCode",{parentName:"p"},"PoolModifyPositionTest")," for these operations."))),(0,r.kt)("h2",{id:"deployment-scripts"},"Deployment Scripts"),(0,r.kt)("p",null,"The template includes a few scripts that help with deploying hooks. These scripts are located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," folder."),(0,r.kt)("p",null,"Lets look at these scripts one by one:"),(0,r.kt)("h3",{id:"1-deploying-your-own-tokens"},"1. Deploying Your Own Tokens"),(0,r.kt)("p",null,"The template includes Mock UNI and Mock USDC contracts for testing. Deploy them using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"}," forge create script/mocks/mUNI.sol:MockUNI \\\n --rpc-url [your_rpc_url_here] \\\n --private-key [your_private_key_on_goerli_here] \\\n\n forge create script/mocks/mUSDC.sol:MockUSDC \\\n --rpc-url [your_rpc_url_here] \\\n --private-key [your_private_key_on_goerli_here] \\\n")),(0,r.kt)("h3",{id:"2-script01_createpoolssol"},"2. script/01_CreatePool.s.sol"),(0,r.kt)("p",null,"This script contains the steps for initializing the pool with an existing hook. It uses the pre-deployed PoolManager contract and\ntoken contracts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'contract CreatePoolScript is Script {\n    using CurrencyLibrary for Currency;\n\n    //addresses with contracts deployed\n    address constant GOERLI_POOLMANAGER = address(0x3A9D48AB9751398BbFa63ad67599Bb04e4BdF98b); //pool manager deployed to GOERLI\n    address constant MUNI_ADDRESS = address(0xbD97BF168FA913607b996fab823F88610DCF7737); //mUNI deployed to GOERLI -- insert your own contract address here\n    address constant MUSDC_ADDRESS = address(0xa468864e673a807572598AB6208E49323484c6bF); //mUSDC deployed to GOERLI -- insert your own contract address here\n    address constant HOOK_ADDRESS = address(0x3CA2cD9f71104a6e1b67822454c725FcaeE35fF6); //address of the hook contract deployed to goerli -- you can use this hook address or deploy your own!\n\n    IPoolManager manager = IPoolManager(GOERLI_POOLMANAGER);\n\n    function run() external {\n        // sort the tokens!\n        address token0 = uint160(MUSDC_ADDRESS) < uint160(MUNI_ADDRESS) ? MUSDC_ADDRESS : MUNI_ADDRESS;\n        address token1 = uint160(MUSDC_ADDRESS) < uint160(MUNI_ADDRESS) ? MUNI_ADDRESS : MUSDC_ADDRESS;\n        uint24 swapFee = 4000;\n        int24 tickSpacing = 10;\n\n        // floor(sqrt(1) * 2^96)\n        uint160 startingPrice = 79228162514264337593543950336;\n\n        bytes memory hookData = abi.encode(block.timestamp);\n\n        PoolKey memory pool = PoolKey({\n            currency0: Currency.wrap(token0),\n            currency1: Currency.wrap(token1),\n            fee: swapFee,\n            tickSpacing: tickSpacing,\n            hooks: IHooks(HOOK_ADDRESS)\n        });\n\n        // Turn the Pool into an ID so you can use it for modifying positions, swapping, etc.\n        PoolId id = PoolIdLibrary.toId(pool);\n        bytes32 idBytes = PoolId.unwrap(id);\n\n        console.log("Pool ID Below");\n        console.logBytes32(bytes32(idBytes));\n\n        vm.broadcast();\n        manager.initialize(pool, startingPrice, hookData);\n    }\n}\n')),(0,r.kt)("h3",{id:"3-script00_counterssol"},"3. script/00_Counter.s.sol"),(0,r.kt)("p",null,"This script deploys the Counter hook using Deterministic Deployment Proxy. It uses the pre-deployed PoolManager contract\nand proxy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'contract CounterScript is Script {\n    address constant CREATE2_DEPLOYER = address(0x4e59b44847b379578588920cA78FbF26c0B4956C);\n    address constant GOERLI_POOLMANAGER = address(0x3A9D48AB9751398BbFa63ad67599Bb04e4BdF98b);\n\n    function setUp() public {}\n\n    function run() public {\n        // hook contracts must have specific flags encoded in the address\n        uint160 flags = uint160(\n            Hooks.BEFORE_SWAP_FLAG | Hooks.AFTER_SWAP_FLAG | Hooks.BEFORE_ADD_LIQUIDITY_FLAG\n                | Hooks.BEFORE_REMOVE_LIQUIDITY_FLAG\n        );\n\n        // Mine a salt that will produce a hook address with the correct flags\n        (address hookAddress, bytes32 salt) =\n            HookMiner.find(CREATE2_DEPLOYER, flags, type(Counter).creationCode, abi.encode(address(GOERLI_POOLMANAGER)));\n\n        // Deploy the hook using CREATE2\n        vm.broadcast();\n        Counter counter = new Counter{salt: salt}(IPoolManager(address(GOERLI_POOLMANAGER)));\n        require(address(counter) == hookAddress, "CounterScript: hook address mismatch");\n    }\n}\n')))}d.isMDXComponent=!0},3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>y});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(o),y=r,k=u["".concat(l,".").concat(y)]||u[y]||d[y]||a;return o?n.createElement(k,s(s({ref:t},p),{},{components:o})):n.createElement(k,s({ref:t},p))}));function y(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=o[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"}}]);